[{"/Users/sagarmanghnani/Desktop/covid-dashboard/src/index.tsx":"1","/Users/sagarmanghnani/Desktop/covid-dashboard/src/reportWebVitals.ts":"2","/Users/sagarmanghnani/Desktop/covid-dashboard/src/App.tsx":"3","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Containers/CountryData.tsx":"4","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Api/covid-api.ts":"5","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Constants.ts":"6","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Models/CountryTimeline.model.ts":"7","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Utils.ts":"8","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Components/TimeLineSummaryCard.tsx":"9","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Components/TimeLineSummaryChart.tsx":"10"},{"size":500,"mtime":1610946356963,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1610946356966,"results":"13","hashOfConfig":"12"},{"size":257,"mtime":1610996833385,"results":"14","hashOfConfig":"12"},{"size":3934,"mtime":1611689233312,"results":"15","hashOfConfig":"12"},{"size":407,"mtime":1610998804243,"results":"16","hashOfConfig":"12"},{"size":614,"mtime":1611687508879,"results":"17","hashOfConfig":"12"},{"size":879,"mtime":1610998804252,"results":"18","hashOfConfig":"12"},{"size":629,"mtime":1611500584329,"results":"19","hashOfConfig":"12"},{"size":4887,"mtime":1611689203196,"results":"20","hashOfConfig":"12"},{"size":1962,"mtime":1611687540649,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1bahh1k",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/Users/sagarmanghnani/Desktop/covid-dashboard/src/index.tsx",[],["47","48"],"/Users/sagarmanghnani/Desktop/covid-dashboard/src/reportWebVitals.ts",[],"/Users/sagarmanghnani/Desktop/covid-dashboard/src/App.tsx",["49"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ManageCountryData from './Containers/CountryData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ManageCountryData/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Containers/CountryData.tsx",["50"],"import React, { useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport getCountryTimeSeriesData from '../Api/covid-api';\nimport { TimeLineSummaryCard } from '../Components/TimeLineSummaryCard';\nimport { Constants } from '../Constants';\nimport { CountryTimeLine, CountryTimeLineResponse } from '../Models/CountryTimeline.model';\nimport getLastXDaysTimeLineData from '../Utils'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport default function ManageCountryData() {\n    // let lastDayTimeSummary:CountryTimeLine;\n    const[lastDayTimeSummary, updateLastDayTimeSummary] = useState(new CountryTimeLine());\n    const [covidTimeSummaryList, updateCovidTimeLineList] = useState<CountryTimeLine[]>([])\n    const [selectedType, updateSelectedCovidStatsTyope] = useState<string>(Constants.COVID_STATUS_TYPE_CONFIRMED);\n    useEffect(() => {\n        getCountryTimeSeriesData().then((data:any) => {\n            const tempCovidData:any[] = data.cases_time_series;\n            if(tempCovidData){\n                const formattedCovidData = tempCovidData.map(cases => {\n                    return new CountryTimeLine().mapJsonDataToCountryTimeLine(cases);\n                })\n                updateCovidTimeLineList([...formattedCovidData]);\n            }\n        })\n    }, [])\n\n    useEffect(() => {\n        updateLastDayTimeSummary(fetchLatestDayCovidSummary(covidTimeSummaryList))\n    }, [covidTimeSummaryList])\n\n    const fetchLatestDayCovidSummary = (covidTimeSummary:CountryTimeLine[]) => {\n        console.log(covidTimeSummary[covidTimeSummary.length - 1])\n        return covidTimeSummary[covidTimeSummary.length - 1];\n    }\n\n    const showSummaryData = (type:string) => {\n        if(lastDayTimeSummary){\n            const propsToPass:any = {\n                lastXDaysStats: getLastXDaysTimeLineData(covidTimeSummaryList),\n                handleSelectedStatsType:handleSelectedStatsType\n            }\n            switch(type) {\n                case Constants.COVID_STATUS_TYPE_CONFIRMED: {\n                    propsToPass.type = Constants.COVID_STATUS_TYPE_CONFIRMED;\n                    propsToPass.statsValue =  lastDayTimeSummary.totalconfirmed;\n                    propsToPass.isSelected = selectedType === type ? true:false\n                    break;\n                }\n\n                case Constants.COVID_STATUS_TYPE_DECEASED: {\n                    propsToPass.type = Constants.COVID_STATUS_TYPE_DECEASED;\n                    propsToPass.statsValue =  lastDayTimeSummary.totaldeceased;\n                    propsToPass.isSelected = selectedType === type ? true:false\n                    break;\n                }\n\n                case Constants.COVID_STATUS_TYPE_RECOVERED: {\n                    propsToPass.type = Constants.COVID_STATUS_TYPE_RECOVERED;\n                    propsToPass.statsValue =  lastDayTimeSummary.totalrecovered;\n                    propsToPass.isSelected = selectedType === type ? true:false\n                    break;\n                }\n            }\n            return (\n                <div>\n                    <TimeLineSummaryCard\n                    {...propsToPass}\n                    ></TimeLineSummaryCard>\n                </div>\n            )\n        }\n        return null;\n    }\n\n    function handleSelectedStatsType(type:string) {\n        updateSelectedCovidStatsTyope(type);\n    }\n\n    \n    return (\n        <div>\n            <Container>\n               <Row>\n                    <Col xs={4}>\n                        {showSummaryData(Constants.COVID_STATUS_TYPE_CONFIRMED)}\n                    </Col>\n\n                    <Col xs={4}>\n                        {showSummaryData(Constants.COVID_STATUS_TYPE_RECOVERED)}\n                    </Col>\n\n                    <Col xs={4}>\n                        {showSummaryData(Constants.COVID_STATUS_TYPE_DECEASED)}\n                    </Col>\n                </Row> \n            </Container>\n        </div>\n    )\n}\n","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Api/covid-api.ts",[],"/Users/sagarmanghnani/Desktop/covid-dashboard/src/Constants.ts",[],"/Users/sagarmanghnani/Desktop/covid-dashboard/src/Models/CountryTimeline.model.ts",[],"/Users/sagarmanghnani/Desktop/covid-dashboard/src/Utils.ts",[],"/Users/sagarmanghnani/Desktop/covid-dashboard/src/Components/TimeLineSummaryCard.tsx",["51","52"],"import React, { useEffect, useState } from 'react';\nimport { Constants } from '../Constants';\nimport { CountryTimeLine } from '../Models/CountryTimeline.model';\nimport TimeLineSummaryChart from './TimeLineSummaryChart';\nimport  classNames from 'classnames'\nimport './TimeLineSummaryCard.css'\ntype TimeLineSummaryCardProps = {\n    type:string;\n    statsValue:number;\n    lastXDaysStats:CountryTimeLine[];\n    handleSelectedStatsType:Function;\n    isSelected:boolean;\n}\n\nexport const TimeLineSummaryCard = (props:TimeLineSummaryCardProps) => {\n    const [chartLabel, setLabel] = useState<string[]>([]);\n    const [chartData, setChartData] = useState<number[]>([]);\n    useEffect(() => {\n        processChartData();\n    }, [props.type, props.statsValue, props.lastXDaysStats])\n\n    return (\n        <div className={classNames({\n            'confirmed-cases': props.type === Constants.COVID_STATUS_TYPE_CONFIRMED,\n            'deceased-cases': props.type === Constants.COVID_STATUS_TYPE_DECEASED,\n            'recovered-cases':props.type === Constants.COVID_STATUS_TYPE_RECOVERED,\n            'confirmed-cases__active':props.isSelected && props.type === Constants.COVID_STATUS_TYPE_CONFIRMED,\n            'deceased-cases__active':props.type === Constants.COVID_STATUS_TYPE_DECEASED && props.isSelected,\n            'recovered-cases__active':props.type === Constants.COVID_STATUS_TYPE_RECOVERED && props.isSelected\n        })}\n        onClick={() => {\n            props.handleSelectedStatsType(props.type)\n        }}\n         >\n            <p> {getStatsSpecificDetails().name} </p>\n            <p className=\"delta\"> {deltaInStates()} </p>\n            <h5> {props.statsValue} </h5>\n            <TimeLineSummaryChart \n            labels={chartLabel} \n            chartData={chartData}\n            type={props.type}\n            borderColor={getStatsSpecificDetails().borderColor}\n            ></TimeLineSummaryChart>\n        </div>\n    )\n\n    \n\n    function getStatsSpecificDetails(){\n        const statsDataFromType:any = {}\n        switch (props.type) {\n            \n            case Constants.COVID_STATUS_TYPE_CONFIRMED: {\n                statsDataFromType.name = 'Confirmed';\n                statsDataFromType.borderColor = Constants.CONFIRMED_COVID_CHART_COLOR;\n                break;\n            }\n\n            case Constants.COVID_STATUS_TYPE_DECEASED: {\n                statsDataFromType.name = 'Deceased';\n                statsDataFromType.borderColor = Constants.DECEASED_COVID_CHART_COLOR;\n                break;\n            }\n\n            case Constants.COVID_STATUS_TYPE_RECOVERED: {\n                statsDataFromType.name = 'Recovered';\n                statsDataFromType.borderColor = Constants.RECOVERED_COVID_CHART_COLOR;\n                break;\n            }\n        }\n        return statsDataFromType;\n    }\n\n    function getStatsFromType(stats:CountryTimeLine):number {\n        let returnData:number;\n        switch(props.type){\n            case Constants.COVID_STATUS_TYPE_CONFIRMED: {\n                returnData =  stats.dailyconfirmed;\n                break;\n            }\n\n            case Constants.COVID_STATUS_TYPE_RECOVERED: {\n                returnData =   stats.dailyrecovered\n                break;\n            }\n\n            case Constants.COVID_STATUS_TYPE_DECEASED: {\n                returnData =   stats.dailyrecovered\n                break;\n            }\n\n            default: {\n                returnData = 0\n            }\n        }\n        return returnData;\n    }\n\n    function processChartData(){\n        const labels:string[] = [];\n        const dataNumber:number[] = [];\n        for(const stats of props.lastXDaysStats){\n            labels.push(stats.dateymd);\n            dataNumber.push(getStatsFromType(stats))\n        }\n\n        const dataSet:ChartDataSet = {\n            label:\"\",\n            data:dataNumber,\n            fillColor:'red',\n            strokeColor:\"\"\n        }\n\n        setChartData(dataNumber);\n        setLabel(labels);\n\n    }\n\n    function deltaInStates(){\n        if(props.lastXDaysStats && props.lastXDaysStats.length && props.lastXDaysStats.length > 1) {\n            const length:number = props.lastXDaysStats.length;\n            switch(props.type){\n                case Constants.COVID_STATUS_TYPE_RECOVERED: {\n                    return props.lastXDaysStats[length - 1].totalrecovered - props.lastXDaysStats[length - 2].totalrecovered;\n                }\n\n                case Constants.COVID_STATUS_TYPE_CONFIRMED: {\n                    return props.lastXDaysStats[length - 1].totalconfirmed - props.lastXDaysStats[length - 2].totalconfirmed;\n                }\n\n                case Constants.COVID_STATUS_TYPE_DECEASED: {\n                    return props.lastXDaysStats[length - 1].totaldeceased - props.lastXDaysStats[length - 2].totaldeceased;\n                }\n                \n            }\n        }\n    }\n\n\n    \n\n\n\n}\n\n\n","/Users/sagarmanghnani/Desktop/covid-dashboard/src/Components/TimeLineSummaryChart.tsx",["53","54","55","56","57"],"import React, { useEffect, useState } from 'react';\nimport { CountryTimeLine } from '../Models/CountryTimeline.model';\nimport Chart, { ChartDataSets } from 'chart.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\ntype TimeLineSummaryChartProps = {\n    labels:string[];\n    chartData:number[];\n    borderColor:string;\n    type:string;\n}\n\nexport default function TimeLineSummaryChart(props:TimeLineSummaryChartProps) {\n\n    useEffect(() => {\n        createChart()\n    }, [props.labels, props.chartData])\n\n    return (\n        <canvas id={`covid-stats-${props.type}`}></canvas>\n    )\n\n    function createChart() {\n        const covidChartCtx = document.getElementById(`covid-stats-${props.type}`) as HTMLCanvasElement;\n        const chart = new Chart(covidChartCtx, {\n            type:'line',\n            data: {\n                labels:props.labels,\n                datasets:[\n                    {\n                        data:props.chartData,\n                        borderColor:props.borderColor,\n                        backgroundColor:'transparent',\n                    }\n                ],\n            },\n            options: {\n                legend: {\n                    display:false\n                },\n                scales: {\n                    xAxes: [\n                        {\n                            gridLines:{\n                                display:false,\n                            },\n                            ticks: {\n                                display:false\n                            }\n                        }\n                    ],\n                    yAxes: [\n                        {\n                            gridLines:{\n                                display:false,\n                            },\n                            ticks: {\n                                display:false\n                            }\n                        }\n                    ]\n                }\n            }\n        })\n    }\n\n    \n}",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":12},{"ruleId":"62","severity":1,"message":"66","line":6,"column":27,"nodeType":"64","messageId":"65","endLine":6,"endColumn":50},{"ruleId":"67","severity":1,"message":"68","line":20,"column":8,"nodeType":"69","endLine":20,"endColumn":60,"suggestions":"70"},{"ruleId":"62","severity":1,"message":"71","line":107,"column":15,"nodeType":"64","messageId":"65","endLine":107,"endColumn":35},{"ruleId":"62","severity":1,"message":"72","line":1,"column":28,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"73","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":25},{"ruleId":"62","severity":1,"message":"74","line":3,"column":17,"nodeType":"64","messageId":"65","endLine":3,"endColumn":30},{"ruleId":"67","severity":1,"message":"75","line":16,"column":8,"nodeType":"69","endLine":16,"endColumn":39,"suggestions":"76"},{"ruleId":"62","severity":1,"message":"77","line":24,"column":15,"nodeType":"64","messageId":"65","endLine":24,"endColumn":20},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'CountryTimeLineResponse' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'dataSet' is assigned a value but never used.","'useState' is defined but never used.","'CountryTimeLine' is defined but never used.","'ChartDataSets' is defined but never used.","React Hook useEffect has a missing dependency: 'createChart'. Either include it or remove the dependency array.",["81"],"'chart' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [props.type, props.statsValue, props.lastXDaysStats, processChartData]",{"range":"86","text":"87"},"Update the dependencies array to be: [props.labels, props.chartData, createChart]",{"range":"88","text":"89"},[720,772],"[props.type, props.statsValue, props.lastXDaysStats, processChartData]",[470,501],"[props.labels, props.chartData, createChart]"]